(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{137:function(e,n,t){"use strict";t.d(n,"a",(function(){return m})),t.d(n,"b",(function(){return u}));var a=t(0),o=t.n(a);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var p=o.a.createContext({}),s=function(e){var n=o.a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},m=function(e){var n=s(e.components);return o.a.createElement(p.Provider,{value:n},e.children)},b={inlineCode:"code",wrapper:function(e){var n=e.children;return o.a.createElement(o.a.Fragment,{},n)}},d=o.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,i=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=s(t),d=a,u=m["".concat(i,".").concat(d)]||m[d]||b[d]||r;return t?o.a.createElement(u,c(c({ref:n},p),{},{components:t})):o.a.createElement(u,c({ref:n},p))}));function u(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,i=new Array(r);i[0]=d;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var p=2;p<r;p++)i[p]=t[p];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},79:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return i})),t.d(n,"metadata",(function(){return c})),t.d(n,"rightToc",(function(){return l})),t.d(n,"default",(function(){return s}));var a=t(2),o=t(6),r=(t(0),t(137)),i={id:"commands",title:"Nim Commands",sidebar_label:"Nim Commands"},c={unversionedId:"commands",id:"commands",isDocsHomePage:!1,title:"Nim Commands",description:"nim command overview",source:"@site/docs/commands.md",slug:"/commands",permalink:"/docs/docs/commands",editUrl:"https://github.com/nimbella/docs/edit/master/docs/commands.md",version:"current",sidebar_label:"Nim Commands",sidebar:"someSidebar",previous:{title:"Install CLI",permalink:"/docs/docs/install"},next:{title:"Command Flags",permalink:"/docs/docs/flags"}},l=[{value:"nim command overview",id:"nim-command-overview",children:[{value:"1 Credential management to access Nimbella namespaces",id:"1-credential-management-to-access-nimbella-namespaces",children:[]},{value:"2 Project-level deployment commands",id:"2-project-level-deployment-commands",children:[]},{value:"3 Entity management commands",id:"3-entity-management-commands",children:[]},{value:"4 Supporting commands",id:"4-supporting-commands",children:[]}]}],p={rightToc:l};function s(e){var n=e.components,t=Object(o.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},p,t,{components:n,mdxType:"MDXLayout"}),Object(r.b)("h2",{id:"nim-command-overview"},"nim command overview"),Object(r.b)("p",null,"The Nimbella Command Line Tool (nim) is your primary portal to Nimbella services. Typing ",Object(r.b)("inlineCode",{parentName:"p"},"nim")," at a command prompt produces the latest version of help output, similar to the following."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{}),"> nim\nA comprehensive CLI for the Nimbella stack\n\nVERSION\n  nimbella-cli/0.1.15 darwin-x64 node-v13.12.0\n\nUSAGE\n  $ nim [COMMAND]\n\nCOMMANDS\n  action      work with actions\n  activation  work with activations\n  auth        manage Nimbella and GitHub credentials\n  doc         display the full documentation of this CLI\n  help        display help for nim\n  info        show information about this version of 'nim'\n  key-value   work with key-value store\n  namespace   work with namespaces\n  objects     work with objects store\n  package     work with packages\n  project     manage and deploy Nimbella projects\n  route       work with routes\n  rule        work with rules\n  trigger     work with triggers\n  update      update the nim CLI\n  web         work with web contents\n  workbench   open Nimbella workbench with login or command\n")),Object(r.b)("p",null,"These commands fall into four categories, described in the following sections."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Note:")," In some of the help output from ",Object(r.b)("inlineCode",{parentName:"p"},"nim")," (as shown) there are colon separators between parts of the command.  This happens because nim is based on ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/oclif"}),"oclif"),", the Open CLI Framework from Heroku, which requires them. However, nim has logic to allow blank separators, so you can also use these commands with blank separators, as in these examples:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{}),"> nim auth list\n> nim project deploy\n")),Object(r.b)("p",null,"If you find a case in which a blank separator doesn't work in nim, please ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/nimbella/nimbella-cli/issues"}),"report it as an issue")," or use a colon separator."),Object(r.b)("h3",{id:"1-credential-management-to-access-nimbella-namespaces"},"1 Credential management to access Nimbella namespaces"),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"auth")," subtree lets you manage Nimbella credentials for Nimbella ",Object(r.b)("em",{parentName:"p"},"namespaces"),", as described in the section ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/docs/namespaces"}),"Nimbella Namespaces"),"."),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"nim auth")," subtree has its own set of commands, as follows."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{}),"> nim auth\nmanage Nimbella and GitHub credentials\n\nUSAGE\n  $ nim auth:COMMAND\n\nCOMMANDS\n  auth:current  Get current namespace with optional details\n  auth:export   Make a token for switching to another machine or web browser\n  auth:github   manage GitHub accounts\n  auth:list     List all your Nimbella namespaces\n  auth:login    Gain access to a Nimbella namespace\n  auth:logout   Drop access to a Nimbella namespace\n  auth:switch   Switch to a different Nimbella namespace\n")),Object(r.b)("h3",{id:"2-project-level-deployment-commands"},"2 Project-level deployment commands"),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"nim project")," subtree has three commands:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"create")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"deploy")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"watch"))),Object(r.b)("p",null,"These subcommands operate on logical groupings of resources (web content, storage, and APIs) that make up typical applications. Such a grouping is called a ",Object(r.b)("em",{parentName:"p"},"project")," and is described more in ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/docs/deployerOverview"}),"About Nimbella Projects"),"."),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"project:deploy")," command controls the Nimbella ",Object(r.b)("em",{parentName:"p"},"deployer"),", which operates on projects. Much of the rest of this document concerns itself with projects and the deployer."),Object(r.b)("p",null,"Help output for the ",Object(r.b)("inlineCode",{parentName:"p"},"nim project")," command:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{}),"> nim project\nmanage and deploy Nimbella projects\n\nUSAGE\n  $ nim project:COMMAND\n\nCOMMANDS\n  project:create  Create a Nimbella Project\n  project:deploy  Deploy Nimbella projects\n  project:watch   Watch Nimbella projects, deploying incrementally on change\n")),Object(r.b)("p",null,"Help output for the ",Object(r.b)("inlineCode",{parentName:"p"},"nim project create")," command:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{}),"> nim project create\nCreate a Nimbella Project\n\nUSAGE\n  $ nim project:create [PROJECT]\n\nARGUMENTS\n  PROJECT  project path in the file system\n\nOPTIONS\n  -c, --clientCode                           Generates client code\n  -i, --id=id                                API specs id/name/path\n  -k, --key=key                              Key to access the source API\n  -l, --language=go|js|ts|py|java|swift|php  [default: js] Language for the project (creates sample project unless source is specified)\n  -o, --overwrite                            Overwrites the existing nimbella project directory if it exists\n  -s, --source=postman|openapi               API specs source\n  -u, --updateSource                         Sync updated API specs back to source\n  -v, --verbose                              Greater detail in error messages\n  --config                                   Generate template config file\n  --help                                     Show help\n")),Object(r.b)("p",null,"See the ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/docs/singleAction"}),"Example: Create and deploy a project with a single action")," for an example of using the project create command."),Object(r.b)("p",null,"Help output for the ",Object(r.b)("inlineCode",{parentName:"p"},"nim project deploy")," command:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{}),"> nim project deploy\nDeploy Nimbella projects\n\nUSAGE\n  $ nim project:deploy [PROJECTS]\n\nARGUMENTS\n  PROJECTS  one or more paths to projects\n\nOPTIONS\n  -v, --verbose          Greater detail in error messages\n  --apihost=apihost      API host to use\n  --auth=auth            OpenWhisk auth token to use\n  --env=env              path to environment file\n  --exclude=exclude      project portions to exclude\n  --help                 Show help\n  --include=include      project portions to include\n  --incremental          Deploy only changes since last deploy\n  --insecure             Ignore SSL Certificates\n  --target=target        the target namespace\n  --verbose-build        Display build details\n  --verbose-zip          Display start/end of zipping phase for each action\n  --web-local=web-local  a local directory to receive web deploy, instead of uploading\n  --yarn                 Use yarn instead of npm for node builds\n\n")),Object(r.b)("p",null,"See the ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/docs/singleAction"}),"Example: Create and deploy a project with a single action")," for an example of using the project deploy command."),Object(r.b)("p",null,"Help output for the ",Object(r.b)("inlineCode",{parentName:"p"},"nim project watch")," command:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{}),"> nim project watch\nWatch Nimbella projects, deploying incrementally on change\n\nUSAGE\n  $ nim project:watch [PROJECTS]\n\nARGUMENTS\n  PROJECTS  one or more paths to projects\n\nOPTIONS\n  -v, --verbose          Greater detail in error messages\n  --apihost=apihost      API host to use\n  --auth=auth            OpenWhisk auth token to use\n  --env=env              path to environment file\n  --exclude=exclude      project portions to exclude\n  --help                 Show help\n  --include=include      project portions to include\n  --insecure             Ignore SSL Certificates\n  --target=target        the target namespace\n  --verbose-build        Display build details\n  --verbose-zip          Display start/end of zipping phase for each action\n  --web-local=web-local  a local directory to receive web deploy, instead of uploading\n  --yarn                 Use yarn instead of npm for node builds\n")),Object(r.b)("p",null,"See ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/docs/deployerFeature#project-watching-for-incremental-deployment"}),"Project watching")," for an example of how to use this command for incremental deployment which facilitates faster project development."),Object(r.b)("h3",{id:"3-entity-management-commands"},"3 Entity management commands"),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"action"),", ",Object(r.b)("inlineCode",{parentName:"p"},"activation"),", ",Object(r.b)("inlineCode",{parentName:"p"},"key-value"),", ",Object(r.b)("inlineCode",{parentName:"p"},"namespace"),", ",Object(r.b)("inlineCode",{parentName:"p"},"objects"),", ",Object(r.b)("inlineCode",{parentName:"p"},"package"),", ",Object(r.b)("inlineCode",{parentName:"p"},"route"),", ",Object(r.b)("inlineCode",{parentName:"p"},"rule"),", ",Object(r.b)("inlineCode",{parentName:"p"},"trigger"),", and ",Object(r.b)("inlineCode",{parentName:"p"},"web")," commands each manage the corresponding type of entity in your namespace."),Object(r.b)("p",null,"If you\u2019re an ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://openwhisk.apache.org"}),"Apache OpenWhisk")," developer, see ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/docs/wsk#entity-management-commands-in-nim-vs.-wsk"}),"Entity Management commands in nim vs. wsk")," for a comparison of entity management commands."),Object(r.b)("h3",{id:"4-supporting-commands"},"4 Supporting commands"),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"doc"),", ",Object(r.b)("inlineCode",{parentName:"p"},"help"),", ",Object(r.b)("inlineCode",{parentName:"p"},"info"),", ",Object(r.b)("inlineCode",{parentName:"p"},"update"),", and ",Object(r.b)("inlineCode",{parentName:"p"},"workbench")," commands provide the following supporting services:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"doc"),": Displays the documentation set for the nim CLI."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"help"),": Displays help for nim."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"info"),": Displays information about the version of nim that is installed."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"update"),": Updates to the latest version of nim."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"workbench"),": Manages the Nimbella Workbench for you.")),Object(r.b)("p",null,"The Nimbella Workbench is described in ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/docs/workbench"}),"The Nimbella Workbench")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Note:")," ",Object(r.b)("inlineCode",{parentName:"p"},"nim update")," works only when nim is installed ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/docs/install#install-nim-for-shell-invocation-globally"}),"using the recommended installation method for use from a shell"),". It does not work when nim is installed ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/docs/install#install-nim-as-a-dependency"}),"as a dependency using npm or yarn"),"."))}s.isMDXComponent=!0}}]);